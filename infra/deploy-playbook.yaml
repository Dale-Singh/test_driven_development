---
- hosts: all
  tasks:

    # Install Docker on the remote server (needed to run containers)
    - name: Install docker
      ansible.builtin.apt:
        name: docker.io
        state: latest
        update_cache: true
      become: true

    # Add current SSH user to Docker group on the server (avoids needing sudo)
    - name: Add our user to the docker group, so we don't need sudo/become
      ansible.builtin.user:
        name: '{{ansible_user}}'
        groups: docker
      become: true

    # Reconnect to the server to apply Docker group permissions immediately
    - name: Reset ssh connection to allow the user/group change to take effect
      ansible.builtin.meta: reset_connection

    # Build the Docker image locally on your Mac (host)
    - name: Build container image locally
      shell: |
        docker build --platform linux/amd64 --no-cache -t superlists .
      args:
        chdir: "/Users/dalesingh/Google Drive/My Drive/Projects/Backend Development Projects/test_driven_development"
      delegate_to: 127.0.0.1  # host

    # Export the locally built image to a .tar archive on host
    - name: Export container image locally
      community.docker.docker_image:
        name: superlists
        archive_path: /tmp/superlists-img.tar  # host location
        source: local
      delegate_to: 127.0.0.1

    # Upload the image archive to the remote server
    - name: Upload image to server
      ansible.builtin.copy:
        src: /tmp/superlists-img.tar  # host
        dest: /tmp/superlists-img.tar  # server

    # Import the image from archive into Docker on the server
    - name: Import container image on server
      community.docker.docker_image:
        name: superlists
        load_path: /tmp/superlists-img.tar  # server path
        source: load
        force_source: true
        state: present

    # Render a .env file from a Jinja2 template and upload to the server
    - name: Ensure environment-specific .env file exists on server
      ansible.builtin.template:
        src: env.j2  # host
        dest: ~/superlists.env  # server (in user's home dir)
        force: true # THIS NEEDS TO BE CHANGED TO FALSE WHEN FULLY DEPLOYED TO LIVE
      vars:
        host: "{{ inventory_hostname }}" # The hostname or IP of the target server is found and populated inside .env
        secret_key: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"  # A secret key is generated on the host and populated in .env

    # ========== OLD BIND MOUNT APPROACH (COMMENTED OUT) ==========
    # Create a placeholder db.sqlite3 file on the server (for mounting into the container)
    # - name: Ensure db.sqlite3 file exists outside the container
    #   ansible.builtin.file:
    #     path: /home/dale/db.sqlite3  # server file system
    #     state: touch
    #   become: true
    
    # Ensure the container can write to db.sqlite3:
    # - The Dockerfile creates a nonroot user (UID 100 / GID 101), and the container runs as that user
    # - This task changes ownership of the host's (server) db.sqlite3 file to that user, so it can write to the file when it's bind-mounted into the container
    # - This is required for Django to write to the database
    # - become: true is needed because changing file ownership requires root privileges
    # - name: Set db.sqlite3 ownership to match container user (nonroot)
    #   ansible.builtin.file:
    #     path: /home/dale/db.sqlite3 # server file system
    #     owner: 100
    #     group: 101
    #   become: true

    # OLD CONTAINER CONFIGURATION WITH BIND MOUNT:
    # - Mount server's db.sqlite3 file (persistent DB) to the container
    # - Load env vars (previously uploaded and rendered to the server from the host)
    # - Map server port 80 to container port 8888
    # - name: Run container
    #   community.docker.docker_container:
    #     name: superlists
    #     image: superlists
    #     state: started
    #     recreate: true
    #     env_file: ~/superlists.env  # server path
    #     mounts:
    #       - type: bind # Bind-mount: link host's db.sqlite3 into container at /src/db.sqlite3 for persistent storage
    #         source: /home/dale/db.sqlite3  # server
    #         target: /src/db.sqlite3  # inside container
    #     ports: 80:8888
    # ========== END OLD BIND MOUNT APPROACH ==========

    # ========== NEW DOCKER VOLUME APPROACH ==========
    # Create Docker volume for persistent database storage on the server
    # This replaces the bind mount approach - Docker manages the storage location
    - name: Create Docker volume for database
      community.docker.docker_volume:
        name: superlists-db
        state: present

    # Run container with volume mount instead of bind mount
    # - Volume mount: Docker manages storage, better for production
    # - Mount to /data directory inside container
    # - Database will be created at /data/db.sqlite3
    - name: Run container
      community.docker.docker_container:
        name: superlists
        image: superlists
        state: started
        recreate: true
        env_file: ~/superlists.env  # server path
        mounts:
          - type: volume
            source: superlists-db  # Docker volume name
            target: /data          # container directory where volume is mounted (server)
        ports: 80:8888
        env:
          DJANGO_DB_PATH: /data/db.sqlite3  # Tell Django where to find/create the database

    # Fix volume permissions - CRITICAL STEP
    # Docker volumes are created with root:root ownership by default
    # The container runs as nonroot user (UID 100, GID 101)
    # This step changes ownership so nonroot user can write to the database
    - name: Fix volume permissions for nonroot user
      community.docker.docker_container_exec:
        container: superlists
        command: chown -R nonroot:nonroot /data
        user: root
    # ========== END NEW DOCKER VOLUME APPROACH ==========

    # Run Django migrations inside the container to initialize db.sqlite3, unless the db is up to date
    - name: Run migration inside container
      community.docker.docker_container_exec:
        container: superlists
        command: ./manage.py migrate  # runs inside container

