"""
Django settings for superlists project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Check if the "DJANGO_DEBUG_FALSE" environment variable is set in the current shell session.
# If present, disable debug mode, use a secure secret key from the environment, and set allowed hosts.
if "DJANGO_DEBUG_FALSE" in os.environ:
    DEBUG = False
    # The environment variables are set at the point the docker container is run,
    # it is not defined in the Dockerfile.
    SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]
    # The environment variable DJANGO_ALLOWED_HOST should contain the hostname or IP allowed to access the app.
    ALLOWED_HOSTS = [os.environ["DJANGO_ALLOWED_HOST"]]
    db_path = os.environ["DJANGO_DB_PATH"]

# If the environment variable is not set, enable debug mode (for development),
# use an insecure default secret key and allow all hosts.
else:
    DEBUG = True
    SECRET_KEY = "insecure-key-for-dev"
    ALLOWED_HOSTS = []
    db_path = BASE_DIR / "db.sqlite3"

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-@=xs!bhft27uxao1-*-nib5$+z3%808yrr-a9$n1xp!b9z(#^+'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []

LOGGING = {
    # Define the logging configuration version (always 1 in Django)
    "version": 1,  

    # If set to True, Django will disable all existing loggers. 
    # We keep this False so that existing loggers (like Djangoâ€™s default logging) continue working.
    "disable_existing_loggers": False,  

    # Define how logs should be handled
    "handlers": {
        "console": {  
            "class": "logging.StreamHandler",  # Sends logs to the terminal (console)
        },
    },

    # Define the loggers (who should generate logs and where they go)
    "loggers": {
        "root": {  
            "handlers": ["console"],  # Send logs from the root logger to the console
            "level": "INFO",  # Only show logs at INFO level or higher (INFO, WARNING, ERROR, CRITICAL)
        },
    },
}

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'lists',
    'accounts',
    'functional_tests',
]

# Specifies the custom user model to use instead of Django's default User model.
# This must be set before the first migration and should point to the app label and class name.
AUTH_USER_MODEL = 'accounts.User'

# Defines the authentication backends Django will use.
# This enables passwordless login using a custom backend.
AUTHENTICATION_BACKENDS = [
    'accounts.authentication.PasswordlessAuthenticationBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise middleware is added here to serve static files efficiently in production.
    # This ensures that static files (CSS, JavaScript) are served even when using Gunicorn,
    # since Gunicorn does not handle static files by default.
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'superlists.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'superlists.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': db_path
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Defines the base URL path for serving static files in the browser.
# Django will prepend "/static/" to static file references in templates.
# Example: {% static 'css/style.css' %} -> /static/css/style.css
STATIC_URL = '/static/'
# Specifies the directory where Django will collect all static files 
STATIC_ROOT = BASE_DIR / 'static' 

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuration for sending email using Gmail's SMTP server
# EMAIL_HOST_PASSWORD is securely loaded from environment variables for security
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = "superlistsdalesingh@gmail.com"
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_PASSWORD")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
